{"version":3,"sources":["components/Contact/Contact.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Section/Section.js","redux/contacts/contacts-actions.js","components/Form/Form.js","components/Filter/Filter.js","components/Contact/Contact.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/Form/Form.module.css"],"names":["module","exports","Section","title","children","className","s","section","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","connect","dispatch","onSubmit","contactActions","useState","setName","setNumber","nameInputId","numberInputId","handleInputChange","event","target","value","reset","form","preventDefault","label","htmlFor","input","type","onChange","pattern","required","btn","state","contacts","filter","e","contactsActions","Contact","onDeleteContact","listItem","listItemName","onClick","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","includes","items","list","map","App","autoClose","position","createReducer","actions","find","contact","toast","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e9354fce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"Contact_listItem__2MPLc\",\"listItemName\":\"Contact_listItemName__yp7Ah\",\"btn\":\"Contact_btn__1LBFe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3Z-Vt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2IDKY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1S3tz\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      {title && <h2>{title}</h2>} {children}\n    </section>\n  );\n};\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\nexport default Section;\n","// import types from './contacts-types';\r\nimport shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/change');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId,\r\n//   });\r\n\r\n//   const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value,\r\n//   });\r\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport contactActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport s from './Form.module.css';\n\nconst Form = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit(name, number);\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label} htmlFor={nameInputId}>\n        Name\n      </label>\n\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleInputChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        id={nameInputId}\n      />\n\n      <label className={s.label} htmlFor={numberInputId}>\n        Phone\n      </label>\n\n      <input\n        className={s.input}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleInputChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        id={numberInputId}\n      />\n\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(contactActions.addContact(name, number)),\n});\nexport default connect(null, mapDispatchToProps)(Form);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    <input className={s.input} type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\n\nconst Contact = ({ id, name, number, onDeleteContact }) => (\n  <li className={s.listItem} key={id}>\n    <p className={s.listItemName}>\n      {name} : {number}\n    </p>\n    <button className={s.btn} onClick={() => onDeleteContact(id)}>\n      Delete\n    </button>\n  </li>\n);\n\nexport default Contact;\n\nContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n};\n","import Contact from '../Contact/Contact';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className={s.list}>\n      {contacts &&\n        contacts.map(({ id, name, number }) => (\n          <Contact\n            id={id}\n            name={name}\n            number={number}\n            key={id}\n            onDeleteContact={onDeleteContact}\n          />\n        ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\n// const mapStateToProps = state => {\n//   const { filter, items } = state.contacts;\n\n//   const visibleContacts = getVisibleContacts(items, filter);\n//   return { contacts: visibleContacts };\n// };\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Section from './components/Section/Section';\nimport Form from './components/Form/Form';\n\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst App = () => {\n  return (\n    <div>\n      Homework-6\n      <Section title=\"Phone-book\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n\n        <ContactList />\n      </Section>\n      <ToastContainer autoClose={3000} position={'top-center'} />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import types from './contacts-types';\r\nimport actions from './contacts-actions';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    if (state.find(contact => contact.name === payload.name)) {\r\n      toast(`${payload.name}is already in contacts`);\r\n      return state;\r\n    } else {\r\n      return [...state, payload];\r\n    }\r\n  },\r\n\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case [actions.changeFilter]:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Form_label__2ZWvZ\",\"input\":\"Form_input__3O0Mn\",\"btn\":\"Form_btn__1OhOJ\"};"],"sourceRoot":""}